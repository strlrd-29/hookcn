{
  "name": "use-mouse-position",
  "type": "registry:hook",
  "files": [
    {
      "path": "hooks/use-mouse-position.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nexport type Position = {\n  x: number\n  y: number\n  elementX?: number\n  elementY?: number\n  elementPositionX?: number\n  elementPositionY?: number\n}\n\nexport function useMousePosition<T extends HTMLElement>(): [\n  Position,\n  React.Ref<T>,\n] {\n  const [state, setState] = React.useState<Position>({\n    x: 0,\n    y: 0,\n  })\n\n  const ref = React.useRef<T>(null)\n\n  React.useLayoutEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      const newState: Position = {\n        x: event.pageX,\n        y: event.pageY,\n      }\n\n      if (ref.current?.nodeType === Node.ELEMENT_NODE) {\n        const { left, top } = ref.current.getBoundingClientRect()\n        const elementPositionX = left + window.scrollX\n        const elementPositionY = top + window.scrollY\n        const elementX = event.pageX - elementPositionX\n        const elementY = event.pageY - elementPositionY\n\n        newState.elementPositionX = elementPositionX\n        newState.elementPositionY = elementPositionY\n        newState.elementX = elementX\n        newState.elementY = elementY\n      }\n\n      setState((s) => ({\n        ...s,\n        ...newState,\n      }))\n    }\n\n    document.addEventListener(\"mousemove\", handleMouseMove)\n\n    return () => document.removeEventListener(\"mousemove\", handleMouseMove)\n  }, [])\n\n  return [state, ref]\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
